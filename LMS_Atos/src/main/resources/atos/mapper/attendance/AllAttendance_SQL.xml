<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="atos.lms.attendance.service.dao.AllAttendanceDAO">


<!-- 조건에 따른 동적 WHERE 절 구성 -->
	<sql id="whereClause">
	    <trim prefix="WHERE" prefixOverrides="AND">
	    
		     <if test="true"> 
	            a.STATUS != '1005' 
	         </if>

	        <!-- 교육 코드(Education)에 해당하는 강의 코드 필터링 -->
	        <if test="lectureCode > 0">
	            AND l.EDUCATION = #{lectureCode}
	        </if>
	
	        <!-- 출석일 (Attendance Date) 범위 조건 추가 -->
	        <if test="srcStartDate != null and srcStartDate != ''">
	            <![CDATA[
	            AND a.ATTEND_DATE >= #{srcStartDate}
	            ]]>
	        </if>
	        <if test="srcEndDate != null and srcEndDate != ''">
	            <![CDATA[
	            AND a.ATTEND_DATE <= #{srcEndDate}
	            ]]>
	        </if>
	        
	        <if test="searchCnd == null or searchCnd == ''">
			    AND (s.ID LIKE CONCAT('%', #{searchWrd}, '%') OR s.NAME LIKE CONCAT('%', #{searchWrd}, '%'))
			</if>
	        
			<!-- 검색 조건 (회원명, 업체명, 상태) 처리 -->
	       <if test="searchCnd != null and searchCnd != ''">
	           <choose>
	               <when test="searchCnd == 0">
	                   AND (s.ID LIKE CONCAT('%', #{searchWrd}, '%') OR s.NAME LIKE CONCAT('%', #{searchWrd}, '%'))
	               </when>
	               <when test="searchCnd == 1">
	                   AND c.CORP_NAME LIKE CONCAT('%', #{searchWrd}, '%')
	               </when>
	           </choose>
	       </if>
	    </trim>
	</sql>

<!-- 출석 목록 조회 쿼리 수정 -->
<select id="selectAttendanceList" parameterType="atos.lms.attendance.service.AllAttendanceVO" resultType="atos.lms.attendance.service.AllAttendanceVO">
    SELECT
        a.ATTEND_CODE,  <!-- 출석 코드 -->
        a.ENROLL_ID
        a.ATTEND_DATE,  <!-- 출석일 -->
        a.IN_TIME,      <!-- 입실 시간 -->
        a.OUT_TIME,     <!-- 퇴실 시간 -->
        a.STATUS,       <!-- 출석 상태 코드 -->
        s.MEMBER_ID,           <!-- 학생 아이디 -->
        s.NAME,         <!-- 학생 이름 -->
        c.CORP_NAME,    <!-- 업체명(소속) -->
        d.NAME AS statusName   <!-- 상태명 -->
    FROM
        ATOS_ATTENDANCE a
    LEFT JOIN 
        ATOS_ENROLLMENT s ON a.ENROLL_ID = s.ENROLL_CODE
    LEFT JOIN 
        ATOS_COMPANY c ON s.MEMBER_ID = c.BIZ_REG_NO
    LEFT JOIN
        ATOS_STATUS d ON a.STATUS = d.CODE   <!-- 상태 테이블과 조인 -->
    LEFT JOIN
        ATOS_LECTURE l ON s.LECTURE_ID = l.LECTURE_CODE  <!-- 강의 테이블과 조인 -->
    <include refid="whereClause"/>  <!-- 동적 WHERE 절 추가 -->
    ORDER BY 
        a.ATTEND_CODE DESC
    LIMIT 
        #{recordCountPerPage} OFFSET #{firstIndex}  <!-- 페이징 처리: 페이지당 기록 수와 시작 인덱스 -->
</select>

<!-- 출석 목록 총 개수 조회 -->
	<select id="selectAttendanceListCnt" parameterType="atos.lms.attendance.service.AllAttendanceVO" resultType="int">
	    SELECT COUNT(a.ATTEND_CODE)
	    FROM ATOS_ATTENDANCE a
	    JOIN ATOS_STUDENT s ON a.STUDENT = s.ID
	    JOIN ATOS_COMPANY c ON s.BIZ_REG_NO = c.BIZ_REG_NO
	    JOIN ATOS_LECTURE l ON a.LECTURE_CODE = l.LECTURE_CODE
	    <include refid="whereClause"/>  <!-- 동적 WHERE 절 추가 -->
	</select>
	
	
	<select id="selectEducationList" resultType="atos.lms.attendance.service.AllAttendanceVO">
	    SELECT EDU_CODE, TITLE 
	    FROM ATOS_EDUCATION
	    WHERE STATUS != '1005'  <!-- 상태가 '삭제'인 경우 제외 -->
	</select>
	
	
<!-- 입실 시간 업데이트 -->
    <update id="updateCheckIn" parameterType="map">
        UPDATE ATOS_ATTENDANCE
        SET IN_TIME = #{inTime},
            ATTEND_DATE = #{attendDate}
        WHERE ATTEND_CODE = #{attendCode}
    </update>

<!-- 퇴실 시간 및 상태 업데이트 -->
    <update id="updateCheckOut" parameterType="map">
        UPDATE ATOS_ATTENDANCE
        SET OUT_TIME = #{outTime},
            STATUS = CASE WHEN IN_TIME IS NOT NULL THEN '3001' ELSE STATUS END
        WHERE ATTEND_CODE = #{attendCode}
    </update>
    
    
    
    <select id="selectAttendanceByCode" parameterType="int" resultType="atos.lms.attendance.service.AllAttendanceVO">
	    SELECT ATTEND_CODE, IN_TIME, OUT_TIME, ATTEND_DATE
	    FROM ATOS_ATTENDANCE
	    WHERE ATTEND_CODE = #{attendCode}
	</select>
    
    
    
<!-- 입실 시간 업데이트 (전체) -->
	<update id="updateCheckInAll" parameterType="map">
	    UPDATE ATOS_ATTENDANCE
	    SET IN_TIME = #{inTime},
	        ATTEND_DATE = #{attendDate}
	    WHERE ATTEND_CODE IN
	    <foreach item="item" collection="attendCodes" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</update>
	
<!-- 퇴실 시간 업데이트 (전체) -->
	<update id="updateCheckOutAll" parameterType="map">
	    UPDATE ATOS_ATTENDANCE
	    SET OUT_TIME = #{outTime},
	        STATUS = CASE WHEN IN_TIME IS NOT NULL THEN '3001' ELSE STATUS END
	    WHERE ATTEND_CODE IN
	    <foreach item="item" collection="attendCodes" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</update>
	
<!-- 결석 처리 업데이트 -->
	<update id="updateAllAbsence" parameterType="list">
	    UPDATE ATOS_ATTENDANCE
	    SET STATUS = '3002',  <!-- '3002'는 결석 상태 코드 -->
	        IN_TIME = NULL,    <!-- 입실 시간 null로 설정 -->
	        OUT_TIME = NULL,   <!-- 퇴실 시간 null로 설정 -->
	        ATTEND_DATE = NULL  <!-- 출석일도 null로 설정 -->
	    WHERE ATTEND_CODE IN
	    <foreach item="item" collection="list" open="(" separator="," close=")">
	        #{item}
	    </foreach>
	</update>

<!-- 엑셀 다운로드를 위한 출석 목록 조회 쿼리 -->
    <select id="selectAttendanceListForExcel" resultType="atos.lms.attendance.service.AllAttendanceExcelVO">
        SELECT
            c.CORP_NAME AS corpName,     
            e.TITLE AS title,            
            s.MEMBER_ID AS enrollId,      
            s.NAME AS name,              
            d.NAME AS status,            
            a.ATTEND_DATE AS attendDate, 
            a.IN_TIME AS inTime,         
            a.OUT_TIME AS outTime        
        FROM
            ATOS_ATTENDANCE a
        LEFT JOIN
            ATOS_ENROLLMENT s ON a.ENROLL_ID = s.ENROLL_CODE
        LEFT JOIN
            ATOS_COMPANY c ON s.MEMBER_ID = c.BIZ_REG_NO
        LEFT JOIN
            ATOS_LECTURE l ON s.LECTURE_ID = l.LECTURE_CODE
        LEFT JOIN
            ATOS_EDUCATION e ON l.EDUCATION = e.EDU_CODE
        LEFT JOIN
            ATOS_STATUS d ON a.STATUS = d.CODE  
        <include refid="whereClause"/>   
        ORDER BY
            a.ATTEND_CODE DESC
    </select>



</mapper>